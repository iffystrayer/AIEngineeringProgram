[project]
name = "uaip-scoping-assistant"
version = "1.0.0-dev"
description = "An intelligent, conversational AI agent system for rigorous AI project evaluation"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "U-AIP Development Team"}
]
keywords = ["ai", "ml", "project-scoping", "evaluation", "claude", "agent", "tdd"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core Framework
    "anthropic>=0.18.0",

    # Database
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",

    # Data Validation & Models
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Configuration
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",

    # CLI & Terminal UI
    "rich>=13.7.0",
    "click>=8.1.7",

    # HTTP Client
    "httpx>=0.26.0",

    # Logging
    "structlog>=24.1.0",

    # Document Generation
    "markdown-it-py>=3.0.0",
    "weasyprint>=60.2",

    # Monitoring
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "faker>=22.0.0",

    # Code Quality
    "black>=24.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",

    # Security
    "bandit>=1.7.5",
    "pip-audit>=2.6.1",

    # Git Hooks
    "pre-commit>=3.6.0",

    # Type Stubs
    "types-pyyaml>=6.0.12",
    "types-psycopg2>=2.9.21",
]

[project.scripts]
uaip = "src.cli.main:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "regression: Regression test (critical functionality)",
    "tier1: Fast regression tests (<30s total)",
    "tier2: Full regression tests (<5min total)",
    "tier3: Complete regression tests (E2E, slow)",
    "integration: Integration tests",
    "unit: Unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/**/*.py" = [
    "ARG",  # unused function arguments
    "S101", # use of assert
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]
